
USART_Driver.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000bdc  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000d64  08000d64  00002420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000d64  08000d64  00002420  2**0
                  CONTENTS
  4 .ARM          00000008  08000d64  08000d64  00001d64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000d6c  08000d6c  00002420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000d6c  08000d6c  00001d6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000d70  08000d70  00001d70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000420  20000000  08000d74  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00002420  2**0
                  CONTENTS
 10 .bss          00000040  20000420  20000420  00002420  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000460  20000460  00002420  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00002420  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000179e  00000000  00000000  0000244a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000648  00000000  00000000  00003be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000178  00000000  00000000  00004230  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000010e  00000000  00000000  000043a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002752  00000000  00000000  000044b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000022f8  00000000  00000000  00006c08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009acf  00000000  00000000  00008f00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000129cf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000004e0  00000000  00000000  00012a14  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000061  00000000  00000000  00012ef4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000420 	.word	0x20000420
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000d4c 	.word	0x08000d4c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000424 	.word	0x20000424
 80001c4:	08000d4c 	.word	0x08000d4c

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <RCC_GetPCLK1Value>:
uint16_t AHB_PreScaler[8]= {2,3,8,16,64,128,256,512};
uint16_t APB1_PreScaler[8]= {2,3,8,16,64,128,256,512};
uint16_t APB2_PreScaler[8]= {2,3,8,16,64,128,256,512};

uint32_t RCC_GetPCLK1Value(void)
{
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
	uint32_t pclk1,systemClk;

	uint8_t clksrc,temp,ahbp,apb1;

	clksrc = ((RCC->CFGR >>2) & 0x3);
 80001de:	4b26      	ldr	r3, [pc, #152]	@ (8000278 <RCC_GetPCLK1Value+0xa0>)
 80001e0:	689b      	ldr	r3, [r3, #8]
 80001e2:	089b      	lsrs	r3, r3, #2
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	f003 0303 	and.w	r3, r3, #3
 80001ea:	727b      	strb	r3, [r7, #9]

	if(clksrc == 0)
 80001ec:	7a7b      	ldrb	r3, [r7, #9]
 80001ee:	2b00      	cmp	r3, #0
 80001f0:	d102      	bne.n	80001f8 <RCC_GetPCLK1Value+0x20>
	{
		systemClk = 16000000;
 80001f2:	4b22      	ldr	r3, [pc, #136]	@ (800027c <RCC_GetPCLK1Value+0xa4>)
 80001f4:	60fb      	str	r3, [r7, #12]
 80001f6:	e00b      	b.n	8000210 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc ==1)
 80001f8:	7a7b      	ldrb	r3, [r7, #9]
 80001fa:	2b01      	cmp	r3, #1
 80001fc:	d102      	bne.n	8000204 <RCC_GetPCLK1Value+0x2c>
	{
		systemClk= 8000000;
 80001fe:	4b20      	ldr	r3, [pc, #128]	@ (8000280 <RCC_GetPCLK1Value+0xa8>)
 8000200:	60fb      	str	r3, [r7, #12]
 8000202:	e005      	b.n	8000210 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc ==2)
 8000204:	7a7b      	ldrb	r3, [r7, #9]
 8000206:	2b02      	cmp	r3, #2
 8000208:	d102      	bne.n	8000210 <RCC_GetPCLK1Value+0x38>
	{
		systemClk = RCC_GetPLLOutputClock();
 800020a:	f000 f88f 	bl	800032c <RCC_GetPLLOutputClock>
 800020e:	60f8      	str	r0, [r7, #12]
	}
	 temp = ((RCC->CFGR >>4)& 0XF);
 8000210:	4b19      	ldr	r3, [pc, #100]	@ (8000278 <RCC_GetPCLK1Value+0xa0>)
 8000212:	689b      	ldr	r3, [r3, #8]
 8000214:	091b      	lsrs	r3, r3, #4
 8000216:	b2db      	uxtb	r3, r3
 8000218:	f003 030f 	and.w	r3, r3, #15
 800021c:	723b      	strb	r3, [r7, #8]

	 if(temp <8)
 800021e:	7a3b      	ldrb	r3, [r7, #8]
 8000220:	2b07      	cmp	r3, #7
 8000222:	d802      	bhi.n	800022a <RCC_GetPCLK1Value+0x52>
	 {
		 ahbp =1;
 8000224:	2301      	movs	r3, #1
 8000226:	72fb      	strb	r3, [r7, #11]
 8000228:	e005      	b.n	8000236 <RCC_GetPCLK1Value+0x5e>
	 }

	 else
	 {
		 ahbp = AHB_PreScaler[temp-8];
 800022a:	7a3b      	ldrb	r3, [r7, #8]
 800022c:	3b08      	subs	r3, #8
 800022e:	4a15      	ldr	r2, [pc, #84]	@ (8000284 <RCC_GetPCLK1Value+0xac>)
 8000230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000234:	72fb      	strb	r3, [r7, #11]
	 }
	 //for ahb
	 temp = ((RCC->CFGR >>10)& 0XF);
 8000236:	4b10      	ldr	r3, [pc, #64]	@ (8000278 <RCC_GetPCLK1Value+0xa0>)
 8000238:	689b      	ldr	r3, [r3, #8]
 800023a:	0a9b      	lsrs	r3, r3, #10
 800023c:	b2db      	uxtb	r3, r3
 800023e:	f003 030f 	and.w	r3, r3, #15
 8000242:	723b      	strb	r3, [r7, #8]

	 if(temp <4)
 8000244:	7a3b      	ldrb	r3, [r7, #8]
 8000246:	2b03      	cmp	r3, #3
 8000248:	d802      	bhi.n	8000250 <RCC_GetPCLK1Value+0x78>
	 {
		 apb1 =1;
 800024a:	2301      	movs	r3, #1
 800024c:	72bb      	strb	r3, [r7, #10]
 800024e:	e005      	b.n	800025c <RCC_GetPCLK1Value+0x84>
	 }

	 else
	 {
		 ahbp = APB1_PreScaler[temp-4];
 8000250:	7a3b      	ldrb	r3, [r7, #8]
 8000252:	3b04      	subs	r3, #4
 8000254:	4a0c      	ldr	r2, [pc, #48]	@ (8000288 <RCC_GetPCLK1Value+0xb0>)
 8000256:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800025a:	72fb      	strb	r3, [r7, #11]
	 }

	 pclk1= (systemClk/ahbp)/apb1;
 800025c:	7afb      	ldrb	r3, [r7, #11]
 800025e:	68fa      	ldr	r2, [r7, #12]
 8000260:	fbb2 f2f3 	udiv	r2, r2, r3
 8000264:	7abb      	ldrb	r3, [r7, #10]
 8000266:	fbb2 f3f3 	udiv	r3, r2, r3
 800026a:	607b      	str	r3, [r7, #4]

	return pclk1;
 800026c:	687b      	ldr	r3, [r7, #4]


}
 800026e:	4618      	mov	r0, r3
 8000270:	3710      	adds	r7, #16
 8000272:	46bd      	mov	sp, r7
 8000274:	bd80      	pop	{r7, pc}
 8000276:	bf00      	nop
 8000278:	40023800 	.word	0x40023800
 800027c:	00f42400 	.word	0x00f42400
 8000280:	007a1200 	.word	0x007a1200
 8000284:	20000000 	.word	0x20000000
 8000288:	20000010 	.word	0x20000010

0800028c <RCC_GetPCLK2Value>:
 *
 * @Note              -

 */
uint32_t RCC_GetPCLK2Value(void)
{
 800028c:	b480      	push	{r7}
 800028e:	b085      	sub	sp, #20
 8000290:	af00      	add	r7, sp, #0
	uint32_t SystemClock=0,tmp,pclk2;
 8000292:	2300      	movs	r3, #0
 8000294:	60fb      	str	r3, [r7, #12]
	uint8_t clk_src = ( RCC->CFGR >> 2) & 0X3;
 8000296:	4b20      	ldr	r3, [pc, #128]	@ (8000318 <RCC_GetPCLK2Value+0x8c>)
 8000298:	689b      	ldr	r3, [r3, #8]
 800029a:	089b      	lsrs	r3, r3, #2
 800029c:	b2db      	uxtb	r3, r3
 800029e:	f003 0303 	and.w	r3, r3, #3
 80002a2:	727b      	strb	r3, [r7, #9]

	uint8_t ahbp,apb2p;

	if(clk_src == 0)
 80002a4:	7a7b      	ldrb	r3, [r7, #9]
 80002a6:	2b00      	cmp	r3, #0
 80002a8:	d102      	bne.n	80002b0 <RCC_GetPCLK2Value+0x24>
	{
		SystemClock = 16000000;
 80002aa:	4b1c      	ldr	r3, [pc, #112]	@ (800031c <RCC_GetPCLK2Value+0x90>)
 80002ac:	60fb      	str	r3, [r7, #12]
 80002ae:	e001      	b.n	80002b4 <RCC_GetPCLK2Value+0x28>
	}else
	{
		SystemClock = 8000000;
 80002b0:	4b1b      	ldr	r3, [pc, #108]	@ (8000320 <RCC_GetPCLK2Value+0x94>)
 80002b2:	60fb      	str	r3, [r7, #12]
	}
	tmp = (RCC->CFGR >> 4 ) & 0xF;
 80002b4:	4b18      	ldr	r3, [pc, #96]	@ (8000318 <RCC_GetPCLK2Value+0x8c>)
 80002b6:	689b      	ldr	r3, [r3, #8]
 80002b8:	091b      	lsrs	r3, r3, #4
 80002ba:	f003 030f 	and.w	r3, r3, #15
 80002be:	607b      	str	r3, [r7, #4]

	if(tmp < 0x08)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	2b07      	cmp	r3, #7
 80002c4:	d802      	bhi.n	80002cc <RCC_GetPCLK2Value+0x40>
	{
		ahbp = 1;
 80002c6:	2301      	movs	r3, #1
 80002c8:	72fb      	strb	r3, [r7, #11]
 80002ca:	e005      	b.n	80002d8 <RCC_GetPCLK2Value+0x4c>
	}else
	{
       ahbp = AHB_PreScaler[tmp-8];
 80002cc:	687b      	ldr	r3, [r7, #4]
 80002ce:	3b08      	subs	r3, #8
 80002d0:	4a14      	ldr	r2, [pc, #80]	@ (8000324 <RCC_GetPCLK2Value+0x98>)
 80002d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002d6:	72fb      	strb	r3, [r7, #11]
	}

	tmp = (RCC->CFGR >> 13 ) & 0x7;
 80002d8:	4b0f      	ldr	r3, [pc, #60]	@ (8000318 <RCC_GetPCLK2Value+0x8c>)
 80002da:	689b      	ldr	r3, [r3, #8]
 80002dc:	0b5b      	lsrs	r3, r3, #13
 80002de:	f003 0307 	and.w	r3, r3, #7
 80002e2:	607b      	str	r3, [r7, #4]
	if(tmp < 0x04)
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	2b03      	cmp	r3, #3
 80002e8:	d802      	bhi.n	80002f0 <RCC_GetPCLK2Value+0x64>
	{
		apb2p = 1;
 80002ea:	2301      	movs	r3, #1
 80002ec:	72bb      	strb	r3, [r7, #10]
 80002ee:	e005      	b.n	80002fc <RCC_GetPCLK2Value+0x70>
	}else
	{
		apb2p = APB1_PreScaler[tmp-4];
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	3b04      	subs	r3, #4
 80002f4:	4a0c      	ldr	r2, [pc, #48]	@ (8000328 <RCC_GetPCLK2Value+0x9c>)
 80002f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80002fa:	72bb      	strb	r3, [r7, #10]
	}

	pclk2 = (SystemClock / ahbp )/ apb2p;
 80002fc:	7afb      	ldrb	r3, [r7, #11]
 80002fe:	68fa      	ldr	r2, [r7, #12]
 8000300:	fbb2 f2f3 	udiv	r2, r2, r3
 8000304:	7abb      	ldrb	r3, [r7, #10]
 8000306:	fbb2 f3f3 	udiv	r3, r2, r3
 800030a:	603b      	str	r3, [r7, #0]

	return pclk2;
 800030c:	683b      	ldr	r3, [r7, #0]
}
 800030e:	4618      	mov	r0, r3
 8000310:	3714      	adds	r7, #20
 8000312:	46bd      	mov	sp, r7
 8000314:	bc80      	pop	{r7}
 8000316:	4770      	bx	lr
 8000318:	40023800 	.word	0x40023800
 800031c:	00f42400 	.word	0x00f42400
 8000320:	007a1200 	.word	0x007a1200
 8000324:	20000000 	.word	0x20000000
 8000328:	20000010 	.word	0x20000010

0800032c <RCC_GetPLLOutputClock>:

uint32_t  RCC_GetPLLOutputClock()
{
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0

	return 0;
 8000330:	2300      	movs	r3, #0
}
 8000332:	4618      	mov	r0, r3
 8000334:	46bd      	mov	sp, r7
 8000336:	bc80      	pop	{r7}
 8000338:	4770      	bx	lr
	...

0800033c <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	6078      	str	r0, [r7, #4]
 8000344:	460b      	mov	r3, r1
 8000346:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000348:	78fb      	ldrb	r3, [r7, #3]
 800034a:	2b01      	cmp	r3, #1
 800034c:	d161      	bne.n	8000412 <GPIO_PeriClockControl+0xd6>
	{
		if(pGPIOx == GPIOA)
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a32      	ldr	r2, [pc, #200]	@ (800041c <GPIO_PeriClockControl+0xe0>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d106      	bne.n	8000364 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000356:	4b32      	ldr	r3, [pc, #200]	@ (8000420 <GPIO_PeriClockControl+0xe4>)
 8000358:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800035a:	4a31      	ldr	r2, [pc, #196]	@ (8000420 <GPIO_PeriClockControl+0xe4>)
 800035c:	f043 0301 	orr.w	r3, r3, #1
 8000360:	6313      	str	r3, [r2, #48]	@ 0x30
	else
	{
		//TODO
	}

}
 8000362:	e056      	b.n	8000412 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOB)
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4a2f      	ldr	r2, [pc, #188]	@ (8000424 <GPIO_PeriClockControl+0xe8>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d106      	bne.n	800037a <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 800036c:	4b2c      	ldr	r3, [pc, #176]	@ (8000420 <GPIO_PeriClockControl+0xe4>)
 800036e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000370:	4a2b      	ldr	r2, [pc, #172]	@ (8000420 <GPIO_PeriClockControl+0xe4>)
 8000372:	f043 0302 	orr.w	r3, r3, #2
 8000376:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000378:	e04b      	b.n	8000412 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOC)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4a2a      	ldr	r2, [pc, #168]	@ (8000428 <GPIO_PeriClockControl+0xec>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d106      	bne.n	8000390 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000382:	4b27      	ldr	r3, [pc, #156]	@ (8000420 <GPIO_PeriClockControl+0xe4>)
 8000384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000386:	4a26      	ldr	r2, [pc, #152]	@ (8000420 <GPIO_PeriClockControl+0xe4>)
 8000388:	f043 0304 	orr.w	r3, r3, #4
 800038c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800038e:	e040      	b.n	8000412 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOD)
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a26      	ldr	r2, [pc, #152]	@ (800042c <GPIO_PeriClockControl+0xf0>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d106      	bne.n	80003a6 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000398:	4b21      	ldr	r3, [pc, #132]	@ (8000420 <GPIO_PeriClockControl+0xe4>)
 800039a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800039c:	4a20      	ldr	r2, [pc, #128]	@ (8000420 <GPIO_PeriClockControl+0xe4>)
 800039e:	f043 0308 	orr.w	r3, r3, #8
 80003a2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003a4:	e035      	b.n	8000412 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOE)
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a21      	ldr	r2, [pc, #132]	@ (8000430 <GPIO_PeriClockControl+0xf4>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d106      	bne.n	80003bc <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003ae:	4b1c      	ldr	r3, [pc, #112]	@ (8000420 <GPIO_PeriClockControl+0xe4>)
 80003b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b2:	4a1b      	ldr	r2, [pc, #108]	@ (8000420 <GPIO_PeriClockControl+0xe4>)
 80003b4:	f043 0310 	orr.w	r3, r3, #16
 80003b8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ba:	e02a      	b.n	8000412 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOF)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a1d      	ldr	r2, [pc, #116]	@ (8000434 <GPIO_PeriClockControl+0xf8>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d106      	bne.n	80003d2 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003c4:	4b16      	ldr	r3, [pc, #88]	@ (8000420 <GPIO_PeriClockControl+0xe4>)
 80003c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c8:	4a15      	ldr	r2, [pc, #84]	@ (8000420 <GPIO_PeriClockControl+0xe4>)
 80003ca:	f043 0320 	orr.w	r3, r3, #32
 80003ce:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003d0:	e01f      	b.n	8000412 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOG)
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a18      	ldr	r2, [pc, #96]	@ (8000438 <GPIO_PeriClockControl+0xfc>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d106      	bne.n	80003e8 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003da:	4b11      	ldr	r3, [pc, #68]	@ (8000420 <GPIO_PeriClockControl+0xe4>)
 80003dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003de:	4a10      	ldr	r2, [pc, #64]	@ (8000420 <GPIO_PeriClockControl+0xe4>)
 80003e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003e4:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003e6:	e014      	b.n	8000412 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOH)
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4a14      	ldr	r2, [pc, #80]	@ (800043c <GPIO_PeriClockControl+0x100>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d106      	bne.n	80003fe <GPIO_PeriClockControl+0xc2>
			GPIOH_PCLK_EN();
 80003f0:	4b0b      	ldr	r3, [pc, #44]	@ (8000420 <GPIO_PeriClockControl+0xe4>)
 80003f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f4:	4a0a      	ldr	r2, [pc, #40]	@ (8000420 <GPIO_PeriClockControl+0xe4>)
 80003f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80003fa:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003fc:	e009      	b.n	8000412 <GPIO_PeriClockControl+0xd6>
		}else if (pGPIOx == GPIOI)
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a0f      	ldr	r2, [pc, #60]	@ (8000440 <GPIO_PeriClockControl+0x104>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d105      	bne.n	8000412 <GPIO_PeriClockControl+0xd6>
			GPIOI_PCLK_EN();
 8000406:	4b06      	ldr	r3, [pc, #24]	@ (8000420 <GPIO_PeriClockControl+0xe4>)
 8000408:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800040a:	4a05      	ldr	r2, [pc, #20]	@ (8000420 <GPIO_PeriClockControl+0xe4>)
 800040c:	f043 0301 	orr.w	r3, r3, #1
 8000410:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000412:	bf00      	nop
 8000414:	370c      	adds	r7, #12
 8000416:	46bd      	mov	sp, r7
 8000418:	bc80      	pop	{r7}
 800041a:	4770      	bx	lr
 800041c:	40020000 	.word	0x40020000
 8000420:	40023800 	.word	0x40023800
 8000424:	40020400 	.word	0x40020400
 8000428:	40020800 	.word	0x40020800
 800042c:	40020c00 	.word	0x40020c00
 8000430:	40021000 	.word	0x40021000
 8000434:	40021400 	.word	0x40021400
 8000438:	40021800 	.word	0x40021800
 800043c:	40021c00 	.word	0x40021c00
 8000440:	40022000 	.word	0x40022000

08000444 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
 800044a:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 800044c:	2300      	movs	r3, #0
 800044e:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	681b      	ldr	r3, [r3, #0]
 8000454:	2101      	movs	r1, #1
 8000456:	4618      	mov	r0, r3
 8000458:	f7ff ff70 	bl	800033c <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	795b      	ldrb	r3, [r3, #5]
 8000460:	2b03      	cmp	r3, #3
 8000462:	d820      	bhi.n	80004a6 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	795b      	ldrb	r3, [r3, #5]
 8000468:	461a      	mov	r2, r3
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	791b      	ldrb	r3, [r3, #4]
 800046e:	005b      	lsls	r3, r3, #1
 8000470:	fa02 f303 	lsl.w	r3, r2, r3
 8000474:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	687b      	ldr	r3, [r7, #4]
 800047e:	791b      	ldrb	r3, [r3, #4]
 8000480:	005b      	lsls	r3, r3, #1
 8000482:	2103      	movs	r1, #3
 8000484:	fa01 f303 	lsl.w	r3, r1, r3
 8000488:	43db      	mvns	r3, r3
 800048a:	4619      	mov	r1, r3
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	400a      	ands	r2, r1
 8000492:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	681b      	ldr	r3, [r3, #0]
 8000498:	6819      	ldr	r1, [r3, #0]
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	697a      	ldr	r2, [r7, #20]
 80004a0:	430a      	orrs	r2, r1
 80004a2:	601a      	str	r2, [r3, #0]
 80004a4:	e0c1      	b.n	800062a <GPIO_Init+0x1e6>

	}
	else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	795b      	ldrb	r3, [r3, #5]
 80004aa:	2b04      	cmp	r3, #4
 80004ac:	d117      	bne.n	80004de <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ae:	4b47      	ldr	r3, [pc, #284]	@ (80005cc <GPIO_Init+0x188>)
 80004b0:	68db      	ldr	r3, [r3, #12]
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	7912      	ldrb	r2, [r2, #4]
 80004b6:	4611      	mov	r1, r2
 80004b8:	2201      	movs	r2, #1
 80004ba:	408a      	lsls	r2, r1
 80004bc:	4611      	mov	r1, r2
 80004be:	4a43      	ldr	r2, [pc, #268]	@ (80005cc <GPIO_Init+0x188>)
 80004c0:	430b      	orrs	r3, r1
 80004c2:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004c4:	4b41      	ldr	r3, [pc, #260]	@ (80005cc <GPIO_Init+0x188>)
 80004c6:	689b      	ldr	r3, [r3, #8]
 80004c8:	687a      	ldr	r2, [r7, #4]
 80004ca:	7912      	ldrb	r2, [r2, #4]
 80004cc:	4611      	mov	r1, r2
 80004ce:	2201      	movs	r2, #1
 80004d0:	408a      	lsls	r2, r1
 80004d2:	43d2      	mvns	r2, r2
 80004d4:	4611      	mov	r1, r2
 80004d6:	4a3d      	ldr	r2, [pc, #244]	@ (80005cc <GPIO_Init+0x188>)
 80004d8:	400b      	ands	r3, r1
 80004da:	6093      	str	r3, [r2, #8]
 80004dc:	e035      	b.n	800054a <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	795b      	ldrb	r3, [r3, #5]
 80004e2:	2b05      	cmp	r3, #5
 80004e4:	d117      	bne.n	8000516 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004e6:	4b39      	ldr	r3, [pc, #228]	@ (80005cc <GPIO_Init+0x188>)
 80004e8:	689b      	ldr	r3, [r3, #8]
 80004ea:	687a      	ldr	r2, [r7, #4]
 80004ec:	7912      	ldrb	r2, [r2, #4]
 80004ee:	4611      	mov	r1, r2
 80004f0:	2201      	movs	r2, #1
 80004f2:	408a      	lsls	r2, r1
 80004f4:	4611      	mov	r1, r2
 80004f6:	4a35      	ldr	r2, [pc, #212]	@ (80005cc <GPIO_Init+0x188>)
 80004f8:	430b      	orrs	r3, r1
 80004fa:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004fc:	4b33      	ldr	r3, [pc, #204]	@ (80005cc <GPIO_Init+0x188>)
 80004fe:	68db      	ldr	r3, [r3, #12]
 8000500:	687a      	ldr	r2, [r7, #4]
 8000502:	7912      	ldrb	r2, [r2, #4]
 8000504:	4611      	mov	r1, r2
 8000506:	2201      	movs	r2, #1
 8000508:	408a      	lsls	r2, r1
 800050a:	43d2      	mvns	r2, r2
 800050c:	4611      	mov	r1, r2
 800050e:	4a2f      	ldr	r2, [pc, #188]	@ (80005cc <GPIO_Init+0x188>)
 8000510:	400b      	ands	r3, r1
 8000512:	60d3      	str	r3, [r2, #12]
 8000514:	e019      	b.n	800054a <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	795b      	ldrb	r3, [r3, #5]
 800051a:	2b06      	cmp	r3, #6
 800051c:	d115      	bne.n	800054a <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800051e:	4b2b      	ldr	r3, [pc, #172]	@ (80005cc <GPIO_Init+0x188>)
 8000520:	689b      	ldr	r3, [r3, #8]
 8000522:	687a      	ldr	r2, [r7, #4]
 8000524:	7912      	ldrb	r2, [r2, #4]
 8000526:	4611      	mov	r1, r2
 8000528:	2201      	movs	r2, #1
 800052a:	408a      	lsls	r2, r1
 800052c:	4611      	mov	r1, r2
 800052e:	4a27      	ldr	r2, [pc, #156]	@ (80005cc <GPIO_Init+0x188>)
 8000530:	430b      	orrs	r3, r1
 8000532:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000534:	4b25      	ldr	r3, [pc, #148]	@ (80005cc <GPIO_Init+0x188>)
 8000536:	68db      	ldr	r3, [r3, #12]
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	7912      	ldrb	r2, [r2, #4]
 800053c:	4611      	mov	r1, r2
 800053e:	2201      	movs	r2, #1
 8000540:	408a      	lsls	r2, r1
 8000542:	4611      	mov	r1, r2
 8000544:	4a21      	ldr	r2, [pc, #132]	@ (80005cc <GPIO_Init+0x188>)
 8000546:	430b      	orrs	r3, r1
 8000548:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	791b      	ldrb	r3, [r3, #4]
 800054e:	089b      	lsrs	r3, r3, #2
 8000550:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	791b      	ldrb	r3, [r3, #4]
 8000556:	f003 0303 	and.w	r3, r3, #3
 800055a:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a1b      	ldr	r2, [pc, #108]	@ (80005d0 <GPIO_Init+0x18c>)
 8000562:	4293      	cmp	r3, r2
 8000564:	d044      	beq.n	80005f0 <GPIO_Init+0x1ac>
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	681b      	ldr	r3, [r3, #0]
 800056a:	4a1a      	ldr	r2, [pc, #104]	@ (80005d4 <GPIO_Init+0x190>)
 800056c:	4293      	cmp	r3, r2
 800056e:	d02b      	beq.n	80005c8 <GPIO_Init+0x184>
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	4a18      	ldr	r2, [pc, #96]	@ (80005d8 <GPIO_Init+0x194>)
 8000576:	4293      	cmp	r3, r2
 8000578:	d024      	beq.n	80005c4 <GPIO_Init+0x180>
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	4a17      	ldr	r2, [pc, #92]	@ (80005dc <GPIO_Init+0x198>)
 8000580:	4293      	cmp	r3, r2
 8000582:	d01d      	beq.n	80005c0 <GPIO_Init+0x17c>
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a15      	ldr	r2, [pc, #84]	@ (80005e0 <GPIO_Init+0x19c>)
 800058a:	4293      	cmp	r3, r2
 800058c:	d016      	beq.n	80005bc <GPIO_Init+0x178>
 800058e:	687b      	ldr	r3, [r7, #4]
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	4a14      	ldr	r2, [pc, #80]	@ (80005e4 <GPIO_Init+0x1a0>)
 8000594:	4293      	cmp	r3, r2
 8000596:	d00f      	beq.n	80005b8 <GPIO_Init+0x174>
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	4a12      	ldr	r2, [pc, #72]	@ (80005e8 <GPIO_Init+0x1a4>)
 800059e:	4293      	cmp	r3, r2
 80005a0:	d008      	beq.n	80005b4 <GPIO_Init+0x170>
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a11      	ldr	r2, [pc, #68]	@ (80005ec <GPIO_Init+0x1a8>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d101      	bne.n	80005b0 <GPIO_Init+0x16c>
 80005ac:	2307      	movs	r3, #7
 80005ae:	e020      	b.n	80005f2 <GPIO_Init+0x1ae>
 80005b0:	2300      	movs	r3, #0
 80005b2:	e01e      	b.n	80005f2 <GPIO_Init+0x1ae>
 80005b4:	2306      	movs	r3, #6
 80005b6:	e01c      	b.n	80005f2 <GPIO_Init+0x1ae>
 80005b8:	2305      	movs	r3, #5
 80005ba:	e01a      	b.n	80005f2 <GPIO_Init+0x1ae>
 80005bc:	2304      	movs	r3, #4
 80005be:	e018      	b.n	80005f2 <GPIO_Init+0x1ae>
 80005c0:	2303      	movs	r3, #3
 80005c2:	e016      	b.n	80005f2 <GPIO_Init+0x1ae>
 80005c4:	2302      	movs	r3, #2
 80005c6:	e014      	b.n	80005f2 <GPIO_Init+0x1ae>
 80005c8:	2301      	movs	r3, #1
 80005ca:	e012      	b.n	80005f2 <GPIO_Init+0x1ae>
 80005cc:	40013c00 	.word	0x40013c00
 80005d0:	40020000 	.word	0x40020000
 80005d4:	40020400 	.word	0x40020400
 80005d8:	40020800 	.word	0x40020800
 80005dc:	40020c00 	.word	0x40020c00
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40021400 	.word	0x40021400
 80005e8:	40021800 	.word	0x40021800
 80005ec:	40021c00 	.word	0x40021c00
 80005f0:	2300      	movs	r3, #0
 80005f2:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80005f4:	4b59      	ldr	r3, [pc, #356]	@ (800075c <GPIO_Init+0x318>)
 80005f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005f8:	4a58      	ldr	r2, [pc, #352]	@ (800075c <GPIO_Init+0x318>)
 80005fa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005fe:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000600:	7c7a      	ldrb	r2, [r7, #17]
 8000602:	7cbb      	ldrb	r3, [r7, #18]
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	fa02 f103 	lsl.w	r1, r2, r3
 800060a:	4a55      	ldr	r2, [pc, #340]	@ (8000760 <GPIO_Init+0x31c>)
 800060c:	7cfb      	ldrb	r3, [r7, #19]
 800060e:	3302      	adds	r3, #2
 8000610:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000614:	4b53      	ldr	r3, [pc, #332]	@ (8000764 <GPIO_Init+0x320>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	687a      	ldr	r2, [r7, #4]
 800061a:	7912      	ldrb	r2, [r2, #4]
 800061c:	4611      	mov	r1, r2
 800061e:	2201      	movs	r2, #1
 8000620:	408a      	lsls	r2, r1
 8000622:	4611      	mov	r1, r2
 8000624:	4a4f      	ldr	r2, [pc, #316]	@ (8000764 <GPIO_Init+0x320>)
 8000626:	430b      	orrs	r3, r1
 8000628:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	799b      	ldrb	r3, [r3, #6]
 800062e:	461a      	mov	r2, r3
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	791b      	ldrb	r3, [r3, #4]
 8000634:	005b      	lsls	r3, r3, #1
 8000636:	fa02 f303 	lsl.w	r3, r2, r3
 800063a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800063c:	687b      	ldr	r3, [r7, #4]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	689a      	ldr	r2, [r3, #8]
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	791b      	ldrb	r3, [r3, #4]
 8000646:	005b      	lsls	r3, r3, #1
 8000648:	2103      	movs	r1, #3
 800064a:	fa01 f303 	lsl.w	r3, r1, r3
 800064e:	43db      	mvns	r3, r3
 8000650:	4619      	mov	r1, r3
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	400a      	ands	r2, r1
 8000658:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	6899      	ldr	r1, [r3, #8]
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	697a      	ldr	r2, [r7, #20]
 8000666:	430a      	orrs	r2, r1
 8000668:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	79db      	ldrb	r3, [r3, #7]
 800066e:	461a      	mov	r2, r3
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	791b      	ldrb	r3, [r3, #4]
 8000674:	005b      	lsls	r3, r3, #1
 8000676:	fa02 f303 	lsl.w	r3, r2, r3
 800067a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	68da      	ldr	r2, [r3, #12]
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	791b      	ldrb	r3, [r3, #4]
 8000686:	005b      	lsls	r3, r3, #1
 8000688:	2103      	movs	r1, #3
 800068a:	fa01 f303 	lsl.w	r3, r1, r3
 800068e:	43db      	mvns	r3, r3
 8000690:	4619      	mov	r1, r3
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	400a      	ands	r2, r1
 8000698:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	68d9      	ldr	r1, [r3, #12]
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	697a      	ldr	r2, [r7, #20]
 80006a6:	430a      	orrs	r2, r1
 80006a8:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	7a1b      	ldrb	r3, [r3, #8]
 80006ae:	461a      	mov	r2, r3
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	791b      	ldrb	r3, [r3, #4]
 80006b4:	fa02 f303 	lsl.w	r3, r2, r3
 80006b8:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	685a      	ldr	r2, [r3, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	791b      	ldrb	r3, [r3, #4]
 80006c4:	4619      	mov	r1, r3
 80006c6:	2301      	movs	r3, #1
 80006c8:	408b      	lsls	r3, r1
 80006ca:	43db      	mvns	r3, r3
 80006cc:	4619      	mov	r1, r3
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	400a      	ands	r2, r1
 80006d4:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	6859      	ldr	r1, [r3, #4]
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	697a      	ldr	r2, [r7, #20]
 80006e2:	430a      	orrs	r2, r1
 80006e4:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	795b      	ldrb	r3, [r3, #5]
 80006ea:	2b02      	cmp	r3, #2
 80006ec:	d131      	bne.n	8000752 <GPIO_Init+0x30e>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	791b      	ldrb	r3, [r3, #4]
 80006f2:	08db      	lsrs	r3, r3, #3
 80006f4:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	791b      	ldrb	r3, [r3, #4]
 80006fa:	f003 0307 	and.w	r3, r3, #7
 80006fe:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	7c3a      	ldrb	r2, [r7, #16]
 8000706:	3208      	adds	r2, #8
 8000708:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	009b      	lsls	r3, r3, #2
 8000710:	220f      	movs	r2, #15
 8000712:	fa02 f303 	lsl.w	r3, r2, r3
 8000716:	43db      	mvns	r3, r3
 8000718:	4618      	mov	r0, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	681b      	ldr	r3, [r3, #0]
 800071e:	7c3a      	ldrb	r2, [r7, #16]
 8000720:	4001      	ands	r1, r0
 8000722:	3208      	adds	r2, #8
 8000724:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	7c3a      	ldrb	r2, [r7, #16]
 800072e:	3208      	adds	r2, #8
 8000730:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	7a5b      	ldrb	r3, [r3, #9]
 8000738:	461a      	mov	r2, r3
 800073a:	7bfb      	ldrb	r3, [r7, #15]
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	fa02 f303 	lsl.w	r3, r2, r3
 8000742:	4618      	mov	r0, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	7c3a      	ldrb	r2, [r7, #16]
 800074a:	4301      	orrs	r1, r0
 800074c:	3208      	adds	r2, #8
 800074e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 8000752:	bf00      	nop
 8000754:	3718      	adds	r7, #24
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40023800 	.word	0x40023800
 8000760:	40013800 	.word	0x40013800
 8000764:	40013c00 	.word	0x40013c00

08000768 <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
 8000770:	460b      	mov	r3, r1
 8000772:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	691a      	ldr	r2, [r3, #16]
 8000778:	78fb      	ldrb	r3, [r7, #3]
 800077a:	fa22 f303 	lsr.w	r3, r2, r3
 800077e:	b2db      	uxtb	r3, r3
 8000780:	f003 0301 	and.w	r3, r3, #1
 8000784:	73fb      	strb	r3, [r7, #15]

   return value;
 8000786:	7bfb      	ldrb	r3, [r7, #15]
}
 8000788:	4618      	mov	r0, r3
 800078a:	3714      	adds	r7, #20
 800078c:	46bd      	mov	sp, r7
 800078e:	bc80      	pop	{r7}
 8000790:	4770      	bx	lr

08000792 <USART_Init>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000792:	b580      	push	{r7, lr}
 8000794:	b084      	sub	sp, #16
 8000796:	af00      	add	r7, sp, #0
 8000798:	6078      	str	r0, [r7, #4]

	//Temporary variable
	uint32_t tempreg=0;
 800079a:	2300      	movs	r3, #0
 800079c:	60fb      	str	r3, [r7, #12]

/******************************** Configuration of CR1******************************************/

	//1.Implement the code to enable the Clock for given USART peripheral
	USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2101      	movs	r1, #1
 80007a4:	4618      	mov	r0, r3
 80007a6:	f000 f871 	bl	800088c <USART_PeriClockControl>

	//Enable USART Tx and Rx engines according to the USART_Mode configuration item
	if ( pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	791b      	ldrb	r3, [r3, #4]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d104      	bne.n	80007bc <USART_Init+0x2a>
	{
		//Implement the code to enable the Receiver bit field
		tempreg|= (1 << USART_CR1_RE);
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	f043 0304 	orr.w	r3, r3, #4
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	e010      	b.n	80007de <USART_Init+0x4c>
	}

	else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	791b      	ldrb	r3, [r3, #4]
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d104      	bne.n	80007ce <USART_Init+0x3c>
	{
		//Implement the code to enable the Transmitter bit field
		tempreg |= ( 1 << USART_CR1_TE );
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	f043 0308 	orr.w	r3, r3, #8
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	e007      	b.n	80007de <USART_Init+0x4c>

	}

	else if (pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	791b      	ldrb	r3, [r3, #4]
 80007d2:	2b02      	cmp	r3, #2
 80007d4:	d103      	bne.n	80007de <USART_Init+0x4c>
	{
		//Implement the code to enable the both Transmitter and Receiver bit fields
		tempreg |= ( ( 1 << USART_CR1_RE) | ( 1 << USART_CR1_TE) );
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	f043 030c 	orr.w	r3, r3, #12
 80007dc:	60fb      	str	r3, [r7, #12]
	}

    //Implement the code to configure the Word length configuration item
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M  ;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	7b5b      	ldrb	r3, [r3, #13]
 80007e2:	031b      	lsls	r3, r3, #12
 80007e4:	68fa      	ldr	r2, [r7, #12]
 80007e6:	4313      	orrs	r3, r2
 80007e8:	60fb      	str	r3, [r7, #12]


    //Configuration of parity control bit fields
	if ( pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	7b9b      	ldrb	r3, [r3, #14]
 80007ee:	2b01      	cmp	r3, #1
 80007f0:	d104      	bne.n	80007fc <USART_Init+0x6a>
	{
		//Implement the code to enable the parity control
		tempreg |= ( 1 << USART_CR1_PCE);
 80007f2:	68fb      	ldr	r3, [r7, #12]
 80007f4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80007f8:	60fb      	str	r3, [r7, #12]
 80007fa:	e00b      	b.n	8000814 <USART_Init+0x82>

		//Implement the code to enable EVEN parity
		//Not required because by default EVEN parity will be selected once you enable the parity control

	}else if (pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD )
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	7b9b      	ldrb	r3, [r3, #14]
 8000800:	2b02      	cmp	r3, #2
 8000802:	d107      	bne.n	8000814 <USART_Init+0x82>
	{
		//Implement the code to enable the parity control
	    tempreg |= ( 1 << USART_CR1_PCE);
 8000804:	68fb      	ldr	r3, [r7, #12]
 8000806:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800080a:	60fb      	str	r3, [r7, #12]

	    //Implement the code to enable ODD parity
	    tempreg |= ( 1 << USART_CR1_PS);
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000812:	60fb      	str	r3, [r7, #12]

	}

   //Program the CR1 register
	pUSARTHandle->pUSARTx->USART_CR1 = tempreg;
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	68fa      	ldr	r2, [r7, #12]
 800081a:	60da      	str	r2, [r3, #12]

/******************************** Configuration of CR2******************************************/

	tempreg=0;
 800081c:	2300      	movs	r3, #0
 800081e:	60fb      	str	r3, [r7, #12]

	//Implement the code to configure the number of stop bits inserted during USART frame transmission
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	7b1b      	ldrb	r3, [r3, #12]
 8000824:	031b      	lsls	r3, r3, #12
 8000826:	68fa      	ldr	r2, [r7, #12]
 8000828:	4313      	orrs	r3, r2
 800082a:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->USART_CR2 = tempreg;
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	68fa      	ldr	r2, [r7, #12]
 8000832:	611a      	str	r2, [r3, #16]

/******************************** Configuration of CR3******************************************/

	tempreg=0;
 8000834:	2300      	movs	r3, #0
 8000836:	60fb      	str	r3, [r7, #12]

	//Configuration of USART hardware flow control
	if ( pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	7bdb      	ldrb	r3, [r3, #15]
 800083c:	2b01      	cmp	r3, #1
 800083e:	d104      	bne.n	800084a <USART_Init+0xb8>
	{
		//Implement the code to enable CTS flow control
		tempreg |= ( 1 << USART_CR3_CTSE);
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000846:	60fb      	str	r3, [r7, #12]
 8000848:	e010      	b.n	800086c <USART_Init+0xda>


	}
	else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	7bdb      	ldrb	r3, [r3, #15]
 800084e:	2b02      	cmp	r3, #2
 8000850:	d104      	bne.n	800085c <USART_Init+0xca>
	{
		//Implement the code to enable RTS flow control
		tempreg |= (1 <<USART_CR3_RTSE);
 8000852:	68fb      	ldr	r3, [r7, #12]
 8000854:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000858:	60fb      	str	r3, [r7, #12]
 800085a:	e007      	b.n	800086c <USART_Init+0xda>

	}
	else if (pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	7bdb      	ldrb	r3, [r3, #15]
 8000860:	2b03      	cmp	r3, #3
 8000862:	d103      	bne.n	800086c <USART_Init+0xda>
	{
		//Implement the code to enable both CTS and RTS Flow control
		tempreg |= (1 <<USART_CR3_RTSE)|( 1 << USART_CR3_CTSE);
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800086a:	60fb      	str	r3, [r7, #12]
	}


	pUSARTHandle->pUSARTx->USART_CR3 = tempreg;
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	68fa      	ldr	r2, [r7, #12]
 8000872:	615a      	str	r2, [r3, #20]

/******************************** Configuration of BRR(Baudrate register)******************************************/

	//Implement the code to configure the baud rate
	//We will cover this in the lecture. No action required here
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681a      	ldr	r2, [r3, #0]
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	689b      	ldr	r3, [r3, #8]
 800087c:	4619      	mov	r1, r3
 800087e:	4610      	mov	r0, r2
 8000880:	f000 f8e2 	bl	8000a48 <USART_SetBaudRate>
}
 8000884:	bf00      	nop
 8000886:	3710      	adds	r7, #16
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}

0800088c <USART_PeriClockControl>:


void USART_PeriClockControl(USART_RegDef_t* pUSARTx,uint8_t EnorDi)
{
 800088c:	b480      	push	{r7}
 800088e:	b083      	sub	sp, #12
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
 8000894:	460b      	mov	r3, r1
 8000896:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000898:	78fb      	ldrb	r3, [r7, #3]
 800089a:	2b01      	cmp	r3, #1
 800089c:	d150      	bne.n	8000940 <USART_PeriClockControl+0xb4>
	{
		if(pUSARTx == USART1)
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	4a39      	ldr	r2, [pc, #228]	@ (8000988 <USART_PeriClockControl+0xfc>)
 80008a2:	4293      	cmp	r3, r2
 80008a4:	d105      	bne.n	80008b2 <USART_PeriClockControl+0x26>
		{
			USART1_PCLK_EN();
 80008a6:	4b39      	ldr	r3, [pc, #228]	@ (800098c <USART_PeriClockControl+0x100>)
 80008a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008aa:	4a38      	ldr	r2, [pc, #224]	@ (800098c <USART_PeriClockControl+0x100>)
 80008ac:	f043 0310 	orr.w	r3, r3, #16
 80008b0:	6453      	str	r3, [r2, #68]	@ 0x44
		}


		if(pUSARTx == USART2)
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4a36      	ldr	r2, [pc, #216]	@ (8000990 <USART_PeriClockControl+0x104>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d105      	bne.n	80008c6 <USART_PeriClockControl+0x3a>
		{
			USART2_PCLK_EN();
 80008ba:	4b34      	ldr	r3, [pc, #208]	@ (800098c <USART_PeriClockControl+0x100>)
 80008bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008be:	4a33      	ldr	r2, [pc, #204]	@ (800098c <USART_PeriClockControl+0x100>)
 80008c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80008c4:	6413      	str	r3, [r2, #64]	@ 0x40
		}

		if(pUSARTx == USART3)
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	4a32      	ldr	r2, [pc, #200]	@ (8000994 <USART_PeriClockControl+0x108>)
 80008ca:	4293      	cmp	r3, r2
 80008cc:	d105      	bne.n	80008da <USART_PeriClockControl+0x4e>
		{
			USART3_PCLK_EN();
 80008ce:	4b2f      	ldr	r3, [pc, #188]	@ (800098c <USART_PeriClockControl+0x100>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008d2:	4a2e      	ldr	r2, [pc, #184]	@ (800098c <USART_PeriClockControl+0x100>)
 80008d4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008d8:	6413      	str	r3, [r2, #64]	@ 0x40
		}

		if(pUSARTx == UART4)
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	4a2e      	ldr	r2, [pc, #184]	@ (8000998 <USART_PeriClockControl+0x10c>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d105      	bne.n	80008ee <USART_PeriClockControl+0x62>
		{
			UART4_PCLK_EN();
 80008e2:	4b2a      	ldr	r3, [pc, #168]	@ (800098c <USART_PeriClockControl+0x100>)
 80008e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008e6:	4a29      	ldr	r2, [pc, #164]	@ (800098c <USART_PeriClockControl+0x100>)
 80008e8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80008ec:	6413      	str	r3, [r2, #64]	@ 0x40
		}

		if(pUSARTx == UART5)
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	4a2a      	ldr	r2, [pc, #168]	@ (800099c <USART_PeriClockControl+0x110>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d105      	bne.n	8000902 <USART_PeriClockControl+0x76>
		{
			UART5_PCLK_EN();
 80008f6:	4b25      	ldr	r3, [pc, #148]	@ (800098c <USART_PeriClockControl+0x100>)
 80008f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fa:	4a24      	ldr	r2, [pc, #144]	@ (800098c <USART_PeriClockControl+0x100>)
 80008fc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000900:	6413      	str	r3, [r2, #64]	@ 0x40
		}

		if(pUSARTx == USART6)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	4a26      	ldr	r2, [pc, #152]	@ (80009a0 <USART_PeriClockControl+0x114>)
 8000906:	4293      	cmp	r3, r2
 8000908:	d105      	bne.n	8000916 <USART_PeriClockControl+0x8a>
		{
			USART6_PCLK_EN();
 800090a:	4b20      	ldr	r3, [pc, #128]	@ (800098c <USART_PeriClockControl+0x100>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800090e:	4a1f      	ldr	r2, [pc, #124]	@ (800098c <USART_PeriClockControl+0x100>)
 8000910:	f043 0320 	orr.w	r3, r3, #32
 8000914:	6453      	str	r3, [r2, #68]	@ 0x44
		}

		if(pUSARTx == UART7)
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	4a22      	ldr	r2, [pc, #136]	@ (80009a4 <USART_PeriClockControl+0x118>)
 800091a:	4293      	cmp	r3, r2
 800091c:	d105      	bne.n	800092a <USART_PeriClockControl+0x9e>
		{
			UART7_PCLK_EN();
 800091e:	4b1b      	ldr	r3, [pc, #108]	@ (800098c <USART_PeriClockControl+0x100>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	4a1a      	ldr	r2, [pc, #104]	@ (800098c <USART_PeriClockControl+0x100>)
 8000924:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8000928:	6413      	str	r3, [r2, #64]	@ 0x40
		}

		if(pUSARTx == UART8)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a1e      	ldr	r2, [pc, #120]	@ (80009a8 <USART_PeriClockControl+0x11c>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d124      	bne.n	800097c <USART_PeriClockControl+0xf0>
		{
			UART8_PCLK_EN();
 8000932:	4b16      	ldr	r3, [pc, #88]	@ (800098c <USART_PeriClockControl+0x100>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000936:	4a15      	ldr	r2, [pc, #84]	@ (800098c <USART_PeriClockControl+0x100>)
 8000938:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800093c:	6413      	str	r3, [r2, #64]	@ 0x40
		{
			USART3_PCLK_DI();
		}

	}
}
 800093e:	e01d      	b.n	800097c <USART_PeriClockControl+0xf0>
		if(pUSARTx == USART1)
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	4a11      	ldr	r2, [pc, #68]	@ (8000988 <USART_PeriClockControl+0xfc>)
 8000944:	4293      	cmp	r3, r2
 8000946:	d105      	bne.n	8000954 <USART_PeriClockControl+0xc8>
			USART1_PCLK_DI();
 8000948:	4b10      	ldr	r3, [pc, #64]	@ (800098c <USART_PeriClockControl+0x100>)
 800094a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800094c:	4a0f      	ldr	r2, [pc, #60]	@ (800098c <USART_PeriClockControl+0x100>)
 800094e:	f023 0310 	bic.w	r3, r3, #16
 8000952:	6453      	str	r3, [r2, #68]	@ 0x44
		if(pUSARTx == USART2)
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	4a0e      	ldr	r2, [pc, #56]	@ (8000990 <USART_PeriClockControl+0x104>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d105      	bne.n	8000968 <USART_PeriClockControl+0xdc>
			USART2_PCLK_DI();
 800095c:	4b0b      	ldr	r3, [pc, #44]	@ (800098c <USART_PeriClockControl+0x100>)
 800095e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000960:	4a0a      	ldr	r2, [pc, #40]	@ (800098c <USART_PeriClockControl+0x100>)
 8000962:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8000966:	6413      	str	r3, [r2, #64]	@ 0x40
		if(pUSARTx == USART3)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	4a0a      	ldr	r2, [pc, #40]	@ (8000994 <USART_PeriClockControl+0x108>)
 800096c:	4293      	cmp	r3, r2
 800096e:	d105      	bne.n	800097c <USART_PeriClockControl+0xf0>
			USART3_PCLK_DI();
 8000970:	4b06      	ldr	r3, [pc, #24]	@ (800098c <USART_PeriClockControl+0x100>)
 8000972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000974:	4a05      	ldr	r2, [pc, #20]	@ (800098c <USART_PeriClockControl+0x100>)
 8000976:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800097a:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	bc80      	pop	{r7}
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop
 8000988:	400113ff 	.word	0x400113ff
 800098c:	40023800 	.word	0x40023800
 8000990:	400047ff 	.word	0x400047ff
 8000994:	40004bff 	.word	0x40004bff
 8000998:	40004fff 	.word	0x40004fff
 800099c:	400053ff 	.word	0x400053ff
 80009a0:	400153ff 	.word	0x400153ff
 80009a4:	40007bff 	.word	0x40007bff
 80009a8:	40007fff 	.word	0x40007fff

080009ac <USART_SendData>:
 *
 * @Note              - Resolve all the TODOs

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b086      	sub	sp, #24
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	60f8      	str	r0, [r7, #12]
 80009b4:	60b9      	str	r1, [r7, #8]
 80009b6:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;

	//Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 80009b8:	2300      	movs	r3, #0
 80009ba:	617b      	str	r3, [r7, #20]
 80009bc:	e031      	b.n	8000a22 <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 80009be:	bf00      	nop
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	2180      	movs	r1, #128	@ 0x80
 80009c6:	4618      	mov	r0, r3
 80009c8:	f000 f8b0 	bl	8000b2c <USART_GetFlagStatus>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d0f6      	beq.n	80009c0 <USART_SendData+0x14>

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 80009d2:	68fb      	ldr	r3, [r7, #12]
 80009d4:	7b5b      	ldrb	r3, [r3, #13]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d118      	bne.n	8000a0c <USART_SendData+0x60>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 80009da:	68bb      	ldr	r3, [r7, #8]
 80009dc:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->USART_DR = (*pdata & (uint16_t)0x01FF);
 80009de:	693b      	ldr	r3, [r7, #16]
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	461a      	mov	r2, r3
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80009ec:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 80009ee:	68fb      	ldr	r3, [r7, #12]
 80009f0:	7b9b      	ldrb	r3, [r3, #14]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d106      	bne.n	8000a04 <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	3301      	adds	r3, #1
 80009fa:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	3301      	adds	r3, #1
 8000a00:	60bb      	str	r3, [r7, #8]
 8000a02:	e00b      	b.n	8000a1c <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000a04:	68bb      	ldr	r3, [r7, #8]
 8000a06:	3301      	adds	r3, #1
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	e007      	b.n	8000a1c <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->USART_DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	781a      	ldrb	r2, [r3, #0]
 8000a10:	68fb      	ldr	r3, [r7, #12]
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000a16:	68bb      	ldr	r3, [r7, #8]
 8000a18:	3301      	adds	r3, #1
 8000a1a:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000a1c:	697b      	ldr	r3, [r7, #20]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	617b      	str	r3, [r7, #20]
 8000a22:	697a      	ldr	r2, [r7, #20]
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	429a      	cmp	r2, r3
 8000a28:	d3c9      	bcc.n	80009be <USART_SendData+0x12>
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000a2a:	bf00      	nop
 8000a2c:	68fb      	ldr	r3, [r7, #12]
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	2140      	movs	r1, #64	@ 0x40
 8000a32:	4618      	mov	r0, r3
 8000a34:	f000 f87a 	bl	8000b2c <USART_GetFlagStatus>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d0f6      	beq.n	8000a2c <USART_SendData+0x80>
}
 8000a3e:	bf00      	nop
 8000a40:	bf00      	nop
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}

08000a48 <USART_SetBaudRate>:
 */



void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	b088      	sub	sp, #32
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
 8000a50:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 8000a52:	2300      	movs	r3, #0
 8000a54:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	4a31      	ldr	r2, [pc, #196]	@ (8000b20 <USART_SetBaudRate+0xd8>)
 8000a5a:	4293      	cmp	r3, r2
 8000a5c:	d003      	beq.n	8000a66 <USART_SetBaudRate+0x1e>
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a30      	ldr	r2, [pc, #192]	@ (8000b24 <USART_SetBaudRate+0xdc>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d103      	bne.n	8000a6e <USART_SetBaudRate+0x26>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8000a66:	f7ff fc11 	bl	800028c <RCC_GetPCLK2Value>
 8000a6a:	61f8      	str	r0, [r7, #28]
 8000a6c:	e002      	b.n	8000a74 <USART_SetBaudRate+0x2c>
  }
  else
  {
	   PCLKx = RCC_GetPCLK1Value();
 8000a6e:	f7ff fbb3 	bl	80001d8 <RCC_GetPCLK1Value>
 8000a72:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->USART_CR1 & (1 << USART_CR1_OVER8))
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	68db      	ldr	r3, [r3, #12]
 8000a78:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d00b      	beq.n	8000a98 <USART_SetBaudRate+0x50>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000a80:	69fa      	ldr	r2, [r7, #28]
 8000a82:	4613      	mov	r3, r2
 8000a84:	009b      	lsls	r3, r3, #2
 8000a86:	4413      	add	r3, r2
 8000a88:	009a      	lsls	r2, r3, #2
 8000a8a:	441a      	add	r2, r3
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	005b      	lsls	r3, r3, #1
 8000a90:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a94:	61bb      	str	r3, [r7, #24]
 8000a96:	e00a      	b.n	8000aae <USART_SetBaudRate+0x66>
  }
  else
  {
	   //over sampling by 16
	  usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8000a98:	69fa      	ldr	r2, [r7, #28]
 8000a9a:	4613      	mov	r3, r2
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	4413      	add	r3, r2
 8000aa0:	009a      	lsls	r2, r3, #2
 8000aa2:	441a      	add	r2, r3
 8000aa4:	683b      	ldr	r3, [r7, #0]
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8000aac:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 8000aae:	69bb      	ldr	r3, [r7, #24]
 8000ab0:	4a1d      	ldr	r2, [pc, #116]	@ (8000b28 <USART_SetBaudRate+0xe0>)
 8000ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ab6:	095b      	lsrs	r3, r3, #5
 8000ab8:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	011b      	lsls	r3, r3, #4
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2264      	movs	r2, #100	@ 0x64
 8000ac8:	fb02 f303 	mul.w	r3, r2, r3
 8000acc:	69ba      	ldr	r2, [r7, #24]
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->USART_CR1 & ( 1 << USART_CR1_OVER8))
 8000ad2:	687b      	ldr	r3, [r7, #4]
 8000ad4:	68db      	ldr	r3, [r3, #12]
 8000ad6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d00a      	beq.n	8000af4 <USART_SetBaudRate+0xac>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	00db      	lsls	r3, r3, #3
 8000ae2:	3332      	adds	r3, #50	@ 0x32
 8000ae4:	4a10      	ldr	r2, [pc, #64]	@ (8000b28 <USART_SetBaudRate+0xe0>)
 8000ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8000aea:	095b      	lsrs	r3, r3, #5
 8000aec:	f003 0307 	and.w	r3, r3, #7
 8000af0:	617b      	str	r3, [r7, #20]
 8000af2:	e009      	b.n	8000b08 <USART_SetBaudRate+0xc0>

   }
  else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	011b      	lsls	r3, r3, #4
 8000af8:	3332      	adds	r3, #50	@ 0x32
 8000afa:	4a0b      	ldr	r2, [pc, #44]	@ (8000b28 <USART_SetBaudRate+0xe0>)
 8000afc:	fba2 2303 	umull	r2, r3, r2, r3
 8000b00:	095b      	lsrs	r3, r3, #5
 8000b02:	f003 030f 	and.w	r3, r3, #15
 8000b06:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 8000b08:	693a      	ldr	r2, [r7, #16]
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->USART_BRR = tempreg;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	609a      	str	r2, [r3, #8]
}
 8000b16:	bf00      	nop
 8000b18:	3720      	adds	r7, #32
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	400113ff 	.word	0x400113ff
 8000b24:	400153ff 	.word	0x400153ff
 8000b28:	51eb851f 	.word	0x51eb851f

08000b2c <USART_GetFlagStatus>:
 *
 * @Note              -

 */
uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StatusFlagName)
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b083      	sub	sp, #12
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	460b      	mov	r3, r1
 8000b36:	70fb      	strb	r3, [r7, #3]
    if(pUSARTx->USART_SR & StatusFlagName)
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	78fb      	ldrb	r3, [r7, #3]
 8000b3e:	4013      	ands	r3, r2
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <USART_GetFlagStatus+0x1c>
    {
    	return SET;
 8000b44:	2301      	movs	r3, #1
 8000b46:	e000      	b.n	8000b4a <USART_GetFlagStatus+0x1e>
    }

   return RESET;
 8000b48:	2300      	movs	r3, #0
}
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	370c      	adds	r7, #12
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <USART2_Init>:
char msg[1024] = "UART Tx testing...\n\r";

USART_Handle_t usart2_handle;

void USART2_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
	usart2_handle.pUSARTx = USART2;
 8000b58:	4b0d      	ldr	r3, [pc, #52]	@ (8000b90 <USART2_Init+0x3c>)
 8000b5a:	4a0e      	ldr	r2, [pc, #56]	@ (8000b94 <USART2_Init+0x40>)
 8000b5c:	601a      	str	r2, [r3, #0]
	usart2_handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 8000b5e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b90 <USART2_Init+0x3c>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b64:	609a      	str	r2, [r3, #8]
	usart2_handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 8000b66:	4b0a      	ldr	r3, [pc, #40]	@ (8000b90 <USART2_Init+0x3c>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	73da      	strb	r2, [r3, #15]
	usart2_handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 8000b6c:	4b08      	ldr	r3, [pc, #32]	@ (8000b90 <USART2_Init+0x3c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	711a      	strb	r2, [r3, #4]
	usart2_handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 8000b72:	4b07      	ldr	r3, [pc, #28]	@ (8000b90 <USART2_Init+0x3c>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	731a      	strb	r2, [r3, #12]
	usart2_handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 8000b78:	4b05      	ldr	r3, [pc, #20]	@ (8000b90 <USART2_Init+0x3c>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	735a      	strb	r2, [r3, #13]
	usart2_handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 8000b7e:	4b04      	ldr	r3, [pc, #16]	@ (8000b90 <USART2_Init+0x3c>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	739a      	strb	r2, [r3, #14]
	USART_Init(&usart2_handle);
 8000b84:	4802      	ldr	r0, [pc, #8]	@ (8000b90 <USART2_Init+0x3c>)
 8000b86:	f7ff fe04 	bl	8000792 <USART_Init>
}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	2000043c 	.word	0x2000043c
 8000b94:	400047ff 	.word	0x400047ff

08000b98 <USART2_GPIOInit>:

void USART2_GPIOInit(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;

	usart_gpios.pGPIOx = GPIOA;
 8000b9e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd8 <USART2_GPIOInit+0x40>)
 8000ba0:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PU;
 8000baa:	2301      	movs	r3, #1
 8000bac:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	72bb      	strb	r3, [r7, #10]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode =7;
 8000bb2:	2307      	movs	r3, #7
 8000bb4:	737b      	strb	r3, [r7, #13]

	//USART2 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber  = GPIO_PIN_NO_2;
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	4618      	mov	r0, r3
 8000bbe:	f7ff fc41 	bl	8000444 <GPIO_Init>

	//USART2 RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 8000bc2:	2303      	movs	r3, #3
 8000bc4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f7ff fc3b 	bl	8000444 <GPIO_Init>


}
 8000bce:	bf00      	nop
 8000bd0:	3710      	adds	r7, #16
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	40020000 	.word	0x40020000

08000bdc <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b086      	sub	sp, #24
 8000be0:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn,GpioLed;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 8000be2:	4b12      	ldr	r3, [pc, #72]	@ (8000c2c <GPIO_ButtonInit+0x50>)
 8000be4:	60fb      	str	r3, [r7, #12]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000be6:	2300      	movs	r3, #0
 8000be8:	743b      	strb	r3, [r7, #16]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000bea:	2300      	movs	r3, #0
 8000bec:	747b      	strb	r3, [r7, #17]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000bee:	2302      	movs	r3, #2
 8000bf0:	74bb      	strb	r3, [r7, #18]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_OD;
 8000bf2:	2301      	movs	r3, #1
 8000bf4:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	74fb      	strb	r3, [r7, #19]


	GPIO_Init(&GPIOBtn);
 8000bfa:	f107 030c 	add.w	r3, r7, #12
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff fc20 	bl	8000444 <GPIO_Init>

	//this is led gpio configuration
	GpioLed.pGPIOx = GPIOD;
 8000c04:	4b0a      	ldr	r3, [pc, #40]	@ (8000c30 <GPIO_ButtonInit+0x54>)
 8000c06:	603b      	str	r3, [r7, #0]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000c08:	230c      	movs	r3, #12
 8000c0a:	713b      	strb	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	717b      	strb	r3, [r7, #5]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000c10:	2302      	movs	r3, #2
 8000c12:	71bb      	strb	r3, [r7, #6]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000c14:	2300      	movs	r3, #0
 8000c16:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	71fb      	strb	r3, [r7, #7]


	GPIO_Init(&GpioLed);
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	4618      	mov	r0, r3
 8000c20:	f7ff fc10 	bl	8000444 <GPIO_Init>

}
 8000c24:	bf00      	nop
 8000c26:	3718      	adds	r7, #24
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40020000 	.word	0x40020000
 8000c30:	40020c00 	.word	0x40020c00

08000c34 <delay>:

void delay(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	e002      	b.n	8000c46 <delay+0x12>
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3301      	adds	r3, #1
 8000c44:	607b      	str	r3, [r7, #4]
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4a04      	ldr	r2, [pc, #16]	@ (8000c5c <delay+0x28>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d9f8      	bls.n	8000c40 <delay+0xc>
}
 8000c4e:	bf00      	nop
 8000c50:	bf00      	nop
 8000c52:	370c      	adds	r7, #12
 8000c54:	46bd      	mov	sp, r7
 8000c56:	bc80      	pop	{r7}
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	0003d08f 	.word	0x0003d08f

08000c60 <main>:


int main(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0

	GPIO_ButtonInit();
 8000c64:	f7ff ffba 	bl	8000bdc <GPIO_ButtonInit>

	USART2_GPIOInit();
 8000c68:	f7ff ff96 	bl	8000b98 <USART2_GPIOInit>

    USART2_Init();
 8000c6c:	f7ff ff72 	bl	8000b54 <USART2_Init>

    USART_PeriClockControl(USART2,ENABLE);
 8000c70:	2101      	movs	r1, #1
 8000c72:	480b      	ldr	r0, [pc, #44]	@ (8000ca0 <main+0x40>)
 8000c74:	f7ff fe0a 	bl	800088c <USART_PeriClockControl>

    while(1)
    {
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000c78:	bf00      	nop
 8000c7a:	2100      	movs	r1, #0
 8000c7c:	4809      	ldr	r0, [pc, #36]	@ (8000ca4 <main+0x44>)
 8000c7e:	f7ff fd73 	bl	8000768 <GPIO_ReadFromInputPin>
 8000c82:	4603      	mov	r3, r0
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d0f8      	beq.n	8000c7a <main+0x1a>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000c88:	f7ff ffd4 	bl	8000c34 <delay>

		USART_SendData(&usart2_handle,(uint8_t*)msg,strlen(msg));
 8000c8c:	4806      	ldr	r0, [pc, #24]	@ (8000ca8 <main+0x48>)
 8000c8e:	f7ff fa9b 	bl	80001c8 <strlen>
 8000c92:	4603      	mov	r3, r0
 8000c94:	461a      	mov	r2, r3
 8000c96:	4904      	ldr	r1, [pc, #16]	@ (8000ca8 <main+0x48>)
 8000c98:	4804      	ldr	r0, [pc, #16]	@ (8000cac <main+0x4c>)
 8000c9a:	f7ff fe87 	bl	80009ac <USART_SendData>
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000c9e:	e7eb      	b.n	8000c78 <main+0x18>
 8000ca0:	400047ff 	.word	0x400047ff
 8000ca4:	40020000 	.word	0x40020000
 8000ca8:	20000020 	.word	0x20000020
 8000cac:	2000043c 	.word	0x2000043c

08000cb0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cb0:	480d      	ldr	r0, [pc, #52]	@ (8000ce8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cb2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cb4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cb8:	480c      	ldr	r0, [pc, #48]	@ (8000cec <LoopForever+0x6>)
  ldr r1, =_edata
 8000cba:	490d      	ldr	r1, [pc, #52]	@ (8000cf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf4 <LoopForever+0xe>)
  movs r3, #0
 8000cbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cc0:	e002      	b.n	8000cc8 <LoopCopyDataInit>

08000cc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cc6:	3304      	adds	r3, #4

08000cc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ccc:	d3f9      	bcc.n	8000cc2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cce:	4a0a      	ldr	r2, [pc, #40]	@ (8000cf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cd0:	4c0a      	ldr	r4, [pc, #40]	@ (8000cfc <LoopForever+0x16>)
  movs r3, #0
 8000cd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cd4:	e001      	b.n	8000cda <LoopFillZerobss>

08000cd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cd8:	3204      	adds	r2, #4

08000cda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cdc:	d3fb      	bcc.n	8000cd6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cde:	f000 f811 	bl	8000d04 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ce2:	f7ff ffbd 	bl	8000c60 <main>

08000ce6 <LoopForever>:

LoopForever:
  b LoopForever
 8000ce6:	e7fe      	b.n	8000ce6 <LoopForever>
  ldr   r0, =_estack
 8000ce8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000cec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cf0:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 8000cf4:	08000d74 	.word	0x08000d74
  ldr r2, =_sbss
 8000cf8:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 8000cfc:	20000460 	.word	0x20000460

08000d00 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d00:	e7fe      	b.n	8000d00 <ADC_IRQHandler>
	...

08000d04 <__libc_init_array>:
 8000d04:	b570      	push	{r4, r5, r6, lr}
 8000d06:	4d0d      	ldr	r5, [pc, #52]	@ (8000d3c <__libc_init_array+0x38>)
 8000d08:	4c0d      	ldr	r4, [pc, #52]	@ (8000d40 <__libc_init_array+0x3c>)
 8000d0a:	1b64      	subs	r4, r4, r5
 8000d0c:	10a4      	asrs	r4, r4, #2
 8000d0e:	2600      	movs	r6, #0
 8000d10:	42a6      	cmp	r6, r4
 8000d12:	d109      	bne.n	8000d28 <__libc_init_array+0x24>
 8000d14:	4d0b      	ldr	r5, [pc, #44]	@ (8000d44 <__libc_init_array+0x40>)
 8000d16:	4c0c      	ldr	r4, [pc, #48]	@ (8000d48 <__libc_init_array+0x44>)
 8000d18:	f000 f818 	bl	8000d4c <_init>
 8000d1c:	1b64      	subs	r4, r4, r5
 8000d1e:	10a4      	asrs	r4, r4, #2
 8000d20:	2600      	movs	r6, #0
 8000d22:	42a6      	cmp	r6, r4
 8000d24:	d105      	bne.n	8000d32 <__libc_init_array+0x2e>
 8000d26:	bd70      	pop	{r4, r5, r6, pc}
 8000d28:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d2c:	4798      	blx	r3
 8000d2e:	3601      	adds	r6, #1
 8000d30:	e7ee      	b.n	8000d10 <__libc_init_array+0xc>
 8000d32:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d36:	4798      	blx	r3
 8000d38:	3601      	adds	r6, #1
 8000d3a:	e7f2      	b.n	8000d22 <__libc_init_array+0x1e>
 8000d3c:	08000d6c 	.word	0x08000d6c
 8000d40:	08000d6c 	.word	0x08000d6c
 8000d44:	08000d6c 	.word	0x08000d6c
 8000d48:	08000d70 	.word	0x08000d70

08000d4c <_init>:
 8000d4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d4e:	bf00      	nop
 8000d50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d52:	bc08      	pop	{r3}
 8000d54:	469e      	mov	lr, r3
 8000d56:	4770      	bx	lr

08000d58 <_fini>:
 8000d58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000d5a:	bf00      	nop
 8000d5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000d5e:	bc08      	pop	{r3}
 8000d60:	469e      	mov	lr, r3
 8000d62:	4770      	bx	lr
